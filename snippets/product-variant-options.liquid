{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.


  Usage:
  {% render 'product-variant-options',
    product: product,
    option: option,
    block: block
  %}
{% endcomment %}
{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'
  assign product_form_id = 'product-form-' | append: section.id
-%}

{%- for value in option.values -%}
  {%- liquid
    assign option_disabled = true
    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
            assign option_disabled = false
          endif
      endcase
    endfor
  -%}

  {%- if option.name contains 'Color' -%}
    {% comment %} Render color options as pills regardless of picker type {% endcomment %}
    <div class="swatch">
      <input
        type="radio"
        id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
        name="{{ option.name }}-pill"
        data-value="{{ value | downcase }}"
        value="{{ value | escape }}"
        form="{{ product_form_id }}"
        onchange="var sel = document.querySelector('select[name=\'{{ option.name | escape }}\']'); if(sel){ sel.value = this.value; sel.dispatchEvent(new Event('change')); }"
        {% if option.selected_value == value %} checked {% endif %}
        {% if option_disabled %} class="disabled" {% endif %}
      >
      <label for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}">
        {{ value }}
        <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
      </label>
      <div class="swatch-name" onclick="this.previousElementSibling.click();">{{ value }}</div>
    </div>
  {%- else -%}
    {%- if block.settings.picker_type == 'button' -%}
      <input
        type="radio"
        id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
        name="{{ option.name }}"
        data-value="{{ value | downcase }}"
        value="{{ value | escape }}"
        form="{{ product_form_id }}"
        {% if option.selected_value == value %} checked {% endif %}
        {% if option_disabled %} class="disabled" {% endif %}
      >
      <label for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}">
        {{ value }}
        <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
      </label>
    {%- elsif block.settings.picker_type == 'dropdown' -%}
      <option
        value="{{ value | escape }}"
        {% if option.selected_value == value %} selected="selected" {% endif %}
      >
        {% if option_disabled -%}
          {{ 'products.product.value_unavailable' | t: option_value: value }}
        {%- else -%}
          {{ value }}
        {%- endif %}
      </option>
    {%- endif -%}
  {%- endif -%}
{%- endfor -%}

{%- comment -%}
  In a dropdown picker, if a Color option is rendered here,
  we output a hidden select so that its value gets passed to the product form.
  (In the dropdown view we will skip rendering a select for color.)
{%- endcomment -%}
{%- if option.name contains 'Color' and block.settings.picker_type == 'dropdown' -%}
  <select aria-label="{{ option.name }}" name="{{ option.name }}" form="{{ product_form_id }}" class="visually-hidden">
    {%- for value in option.values -%}
      <option value="{{ value | escape }}" {% if option.selected_value == value %}selected{% endif %}>{{ value }}</option>
    {%- endfor -%}
  </select>
{%- endif -%}

{% comment %}

<style>
.select {
  max-width: 36rem !important;
}

select:focus > option:checked {
  background: #fff5f1 !important;
}

select option:checked,
select option:hover {
  box-shadow: 0 0 10px 100px #fff5f1 inset !important;
}

select:focus {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
}

.select__select {
    font-size: 14px;
    letter-spacing: normal;
}

label.form__label {
    font-size: 17.5px !important;
    letter-spacing: 0 !important;
}
select option:hover {
  background-color: #fff5f1 !important;
}
/* select {
  background-color: white !important;
  -webkit-appearance: menulist-button;
  appearance: menulist-button;
} */
select option {
  background-color: white !important;
  color: black !important;
  font-size: 14px !important;
  letter-spacing: normal;
}
.product__info-container > * + * {
  margin-top: 0;
}
.template-product .shopify-app-block {
    margin-bottom: 0px !important;
}

select {
    max-width: 36rem !important;
    -webkit-border-radius: 25px !important;
    border-radius: 25px !important;
    background-color: white !important;
    -webkit-appearance: none !important;
    -moz-appearance: none !important;
    appearance: none !important;
}
.select-wrapper {
  max-width: 36rem !important;
  border-radius: 25px;
  overflow: hidden;
  position: relative;
  background-color: white;
}
.select-wrapper select {
  display: block;
  width: 100%;
  padding: 0.75rem 1rem;
  border: none;
  background: transparent;
  outline: none;
  -webkit-appearance: none !important;
  -moz-appearance: none !important;
  appearance: none !important;
}
.select, select {
  display: inline-block;
  width: 100%;
  max-width: 36rem !important;
}
@media screen and (max-width: 800px){
label.form__label {
    font-size: 16px !important;
    letter-spacing: 0.1px !important;
}
}
@supports (-webkit-touch-callout: none) {
  select option {
    background-color: white !important;
    color: black !important;
  }
}
</style>

{% endcomment %}

<style>

.select {
  max-width: 36rem !important;
}
.select:after {
  border-radius: 25px !important;
}

select:focus > option:checked {
  background: #fff5f1 !important;
}

select option:checked,
select option:hover {
  box-shadow: 0 0 10px 100px #fff5f1 inset !important;
}

select:focus {
  outline: none !important;
  border: none !important;
  box-shadow: none !important;
  /* Optionally, if you're using a custom class on your select element: */
  /* .select:focus { outline: none; border: none; box-shadow: none; } */
}

.select__select {
    font-size: 14px;
    letter-spacing: normal;
}

label.form__label {
    font-size: 17.5px !important;
    letter-spacing: 0 !important;
}
select option:hover {
  background-color: #fff5f1 !important;
}
select {
  background-color: white !important;
  /* Disable native styling */
  -webkit-appearance: none;
  appearance: none;
  /* Add custom border styling */
  border: 1px solid #ccc;
  border-radius: 25px;
  /* Ensure enough padding to accommodate a custom arrow if you add one */
  padding: 10px 40px 10px 10px;
}
select option {
  background-color: white !important;
  color: black !important;
  font-size: 14px !important;
  letter-spacing: normal;
}
.product__info-container > * + * {
  margin-top: 0;
}
.template-product .shopify-app-block {
    margin-bottom: 0px !important;
}
@media screen and (max-width: 800px){
label.form__label {
    font-size: 16px !important;
    letter-spacing: 0.1px !important;
}
}
@supports (-webkit-touch-callout: none) {
  select option {
    background-color: white !important;
    color: black !important;
  }
}
  </style>
