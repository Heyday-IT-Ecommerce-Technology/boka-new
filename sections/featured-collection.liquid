{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{{ 'component-slider.css' | asset_url | stylesheet_tag }}
{{ 'template-collection.css' | asset_url | stylesheet_tag }}
{%- if section.settings.enable_quick_add -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  @media screen and (max-width: 749px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top_mobile }}px;
      padding-bottom: {{ section.settings.padding_bottom_mobile }}px;
    }
  }

  @media screen and (min-width: 990px) {
    .section-{{ section.id }}-padding .slider .grid__item {
      max-width: calc((100% / {{ section.settings.columns_desktop }}) - var(--grid-desktop-horizontal-spacing));
      width: 100% !important;
    }
  }
{%- endstyle -%} 

{% if section.settings.color_scheme == 'custom' %}
  {% assign foreground_color_red = section.settings.custom_text_color | color_extract: 'red' %}
  {% assign foreground_color_green = section.settings.custom_text_color | color_extract: 'green' %}
  {% assign foreground_color_blue = section.settings.custom_text_color | color_extract: 'blue' %}
  {% style %}
    #shopify-section-{{ section.id }} .color-custom {
      --color-foreground: {{ foreground_color_red }}, {{ foreground_color_green }}, {{ foreground_color_blue }};
      --color-background: {{ section.settings.custom_background_color }};
      --gradient-background: {{ section.settings.custom_background_color }};;
    }
  {% endstyle %}
{% endif %}

{%- liquid
  assign products_to_display = section.settings.collection.all_products_count

  if section.settings.collection.all_products_count > section.settings.products_to_show
    assign products_to_display = section.settings.products_to_show
    assign more_in_collection = true
  endif

  assign columns_mobile_int = section.settings.columns_mobile | plus: 0
  assign show_mobile_slider = false
  if section.settings.swipe_on_mobile and products_to_display > columns_mobile_int
    assign show_mobile_slider = true
  endif

  assign show_desktop_slider = false
  if section.settings.enable_desktop_slider and products_to_display > section.settings.columns_desktop
    assign show_desktop_slider = true
  endif
  
  assign number_of_dots = products_to_display | minus: section.settings.columns_desktop | plus: 1  
  assign number_of_dots_mobile = products_to_display | minus: section.settings.columns_mobile | plus: 1
-%}

<div class="color-{{ section.settings.color_scheme }} isolate gradient">
  <div class="collection section-{{ section.id }}-padding{% if section.settings.full_width %} collection--full-width{% endif %}">
    <div class="collection__title title-wrapper title-wrapper--no-top-margin page-width{% if show_mobile_slider %} title-wrapper--self-padded-tablet-down{% endif %}{% if show_desktop_slider %} collection__title--desktop-slider{% endif %}">
      {%- if section.settings.title != blank -%}
        <{% if section.settings.heading_tag != 'default' %}{{ section.settings.heading_tag }}{% else %}div{% endif %} class="title inline-richtext {{ section.settings.heading_size }}">{{ section.settings.title }}</{% if section.settings.heading_tag != 'default' %}{{ section.settings.heading_tag }}{% else %}div{% endif %}>
      {%- endif -%}
      {%- if section.settings.description != blank
        or section.settings.show_description
        and section.settings.collection.description != empty
      -%}
        <div class="collection__description {{ section.settings.description_style }} rte">
          {%- if section.settings.show_description -%}
            {{ section.settings.collection.description }}
          {%- else -%}
            {{ section.settings.description -}}
          {%- endif %}
        </div>
      {%- endif -%}
    </div>

    <slider-component class="slider-mobile-gutter{% if section.settings.full_width %} slider-component-full-width{% endif %} page-width{% if show_desktop_slider == false and section.settings.full_width == false %} page-width-desktop{% endif %}{% if show_desktop_slider %} slider-component-desktop{% endif %}">
      <ul
        id="Slider-{{ section.id }}"
        class="grid product-grid contains-card contains-card--product{% if settings.card_style == 'standard' %} contains-card--standard{% endif %} grid--{{ section.settings.columns_desktop }}-col-desktop{% if section.settings.collection == blank %} grid--2-col-tablet-down{% else %} grid--{{ section.settings.columns_mobile }}-col-tablet-down{% endif %}{% if show_mobile_slider or show_desktop_slider %} slider{% if show_desktop_slider %} slider--desktop{% endif %}{% if show_mobile_slider %} slider--tablet{% endif %}{% endif %}"
        role="list"
        aria-label="{{ 'general.slider.name' | t }}"
      >
        {%- for product in section.settings.collection.products limit: section.settings.products_to_show -%}
          <li
            id="Slide-{{ section.id }}-{{ forloop.index }}"
            class="grid__item{% if show_mobile_slider or show_desktop_slider %} slider__slide{% endif %}"
          >
            {% render 'card-product',
              card_product: product,
              media_aspect_ratio: section.settings.image_ratio,
              show_secondary_image: section.settings.show_secondary_image,
              show_vendor: section.settings.show_vendor,
              show_rating: section.settings.show_rating,
              show_quick_add: section.settings.enable_quick_add,
              section_id: section.id,
              enable_learn_more: true
            %}
          </li>
        {%- else -%}
          {%- for i in (1..4) -%}
            <li class="grid__item">
              {% render 'card-product', show_vendor: section.settings.show_vendor %}
            </li>
          {%- endfor -%}
        {%- endfor -%}
      </ul>
      {%- if show_mobile_slider or show_desktop_slider -%}
        <div class="slider-buttons no-js-hidden">
          <button
            type="button"
            class="slider-button slider-button--prev"
            name="previous"
            aria-label="{{ 'general.slider.previous_slide' | t }}"
            aria-controls="Slider-{{ section.id }}"
          >
            {% render 'icon-prev' %}
          </button>
          <div class="slider-counter slider-counter--dots">
            <div class="slideshow__control-wrapper">
              <div class="desktop-only">
                {%- for i in (1..number_of_dots) -%}
                  <button class="slider-counter__link slider-counter__link--dots link" aria-label="{{ 'sections.slideshow.load_slide' | t }} {{ forloop.index }} {{ 'general.slider.of' | t }} {{ forloop.length }}" aria-controls="Slider-{{ section.id }}">
                    <span class="dot"></span>
                  </button>
                {%- endfor -%}
              </div>
              <div class="mobile-only">
                {%- for i in (1..number_of_dots_mobile) -%}
                  <button class="slider-counter__link slider-counter__link--dots link" aria-label="{{ 'sections.slideshow.load_slide' | t }} {{ forloop.index }} {{ 'general.slider.of' | t }} {{ forloop.length }}" aria-controls="Slider-{{ section.id }}">
                    <span class="dot"></span>
                  </button>
                {%- endfor -%}
              </div>
            </div>
          </div>
          <button
            type="button"
            class="slider-button slider-button--next"
            name="next"
            aria-label="{{ 'general.slider.next_slide' | t }}"
            aria-controls="Slider-{{ section.id }}"
          >
            {% render 'icon-next' %}
          </button>
        </div>
      {%- endif -%}
    </slider-component>

    {%- if section.settings.show_view_all and more_in_collection -%}
      <div class="center collection__view-all fadeInAnimate">
        <a
          href="{{ section.settings.collection.url }}"
          class="{% if section.settings.view_all_style == 'link' %}link underlined-link{% elsif section.settings.view_all_style == 'solid' %}button{% else %}button button--secondary{% endif %}"
          aria-label="{{ 'sections.featured_collection.view_all_label' | t: collection_name: section.settings.collection.title }}"
        >
          {{ 'sections.featured_collection.view_all' | t }}
        </a>
      </div>
    {%- endif -%}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Remove desktop-only elements on mobile
    if (window.matchMedia("(max-width: 749px)").matches) {
      const allDesktopOnly = document.querySelectorAll('.desktop-only');
      allDesktopOnly.forEach(eL => {
        eL.remove();
      });
    }

    // Initialize slider functionality
    function initializeSlider() {
      const dotButtons = document.querySelectorAll('[data-slider-id="Slider-{{ section.id }}"]');
      const slider = document.getElementById('Slider-{{ section.id }}');
      const prevButton = document.querySelector('.slider-button--prev[aria-controls="Slider-{{ section.id }}"]');
      const nextButton = document.querySelector('.slider-button--next[aria-controls="Slider-{{ section.id }}"]');
      
      if (!slider || dotButtons.length === 0) return;
      
      const isDesktop = window.matchMedia("(min-width: 990px)").matches;
      const columnsPerView = isDesktop ? {{ section.settings.columns_desktop }} : {{ section.settings.columns_mobile }};
      
      let currentSlideIndex = 0;
      
      // Function to get single slide scroll distance
      function getSingleSlideScrollDistance() {
        const slides = slider.querySelectorAll('.slider__slide');
        if (slides.length === 0) return 0;
        
        const firstSlide = slides[0];
        const slideWidth = firstSlide.offsetWidth;
        const slideStyle = getComputedStyle(firstSlide);
        const slideMargin = parseFloat(slideStyle.marginRight) || 0;
        
        return slideWidth + slideMargin;
      }
      
      // Function to scroll to specific slide index
      function goToSlideIndex(targetIndex) {
        const singleSlideDistance = getSingleSlideScrollDistance();
        const targetScrollLeft = targetIndex * singleSlideDistance;
        
        console.log(`Going to slide ${targetIndex}, scroll distance: ${targetScrollLeft}px`);
        
        slider.scrollTo({
          left: targetScrollLeft,
          behavior: 'smooth'
        });
        
        currentSlideIndex = targetIndex;
        updateActiveDot(targetIndex);
      }
      
      // Handle dot clicks - each dot represents one slide position
      dotButtons.forEach((button, dotIndex) => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          // For your requirement:
          // Dot 0 (first dot): show position 0 (products 1-4)
          // Dot 1 (second dot): show position 1 (starting from 5th product)  
          // Dot 2 (third dot): show position 2 (starting from 6th product)
          // etc.
          
          const targetSlideIndex = dotIndex;
          console.log(`Dot ${dotIndex + 1} clicked, going to slide index ${targetSlideIndex}`);
          
          goToSlideIndex(targetSlideIndex);
        });
      });
      
      // Update active dot function
      function updateActiveDot(slideIndex) {
        dotButtons.forEach((btn, index) => {
          btn.classList.toggle('active', index === slideIndex);
        });
      }
      
      // Listen for arrow button clicks to sync dots
      if (prevButton) {
        prevButton.addEventListener('click', function() {
          setTimeout(() => {
            const scrollLeft = slider.scrollLeft;
            const singleSlideDistance = getSingleSlideScrollDistance();
            if (singleSlideDistance > 0) {
              currentSlideIndex = Math.round(scrollLeft / singleSlideDistance);
              updateActiveDot(currentSlideIndex);
            }
          }, 100);
        });
      }
      
      if (nextButton) {
        nextButton.addEventListener('click', function() {
          setTimeout(() => {
            const scrollLeft = slider.scrollLeft;
            const singleSlideDistance = getSingleSlideScrollDistance();
            if (singleSlideDistance > 0) {
              currentSlideIndex = Math.round(scrollLeft / singleSlideDistance);
              updateActiveDot(currentSlideIndex);
            }
          }, 100);
        });
      }
      
      // Update active dot based on scroll position
      let scrollTimeout;
      slider.addEventListener('scroll', function() {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          const scrollLeft = this.scrollLeft;
          const singleSlideDistance = getSingleSlideScrollDistance();
          
          if (singleSlideDistance > 0) {
            currentSlideIndex = Math.round(scrollLeft / singleSlideDistance);
            updateActiveDot(currentSlideIndex);
          }
        }, 100);
      });
      
      // Handle window resize
      window.addEventListener('resize', function() {
        setTimeout(() => {
          // Recalculate positions after resize
          const scrollLeft = slider.scrollLeft;
          const singleSlideDistance = getSingleSlideScrollDistance();
          if (singleSlideDistance > 0) {
            currentSlideIndex = Math.round(scrollLeft / singleSlideDistance);
            updateActiveDot(currentSlideIndex);
          }
        }, 200);
      });
      
      // Set initial active dot
      updateActiveDot(0);
      
      // Make sure all dots are clickable
      dotButtons.forEach(button => {
        button.style.cursor = 'pointer';
        button.style.pointerEvents = 'auto';
      });
    }
    
    // Initialize after DOM is fully loaded
    setTimeout(initializeSlider, 300);
  });
</script>

<style>
  .slider-counter__link--dots {
    cursor: pointer !important;
    pointer-events: auto !important;
    background: none !important;
    border: none !important;
  }
  
  .slider-counter__link--dots.active .dot {
    opacity: 1 !important;
    transform: scale(1.2) !important;
    background-color: currentColor !important;
  }
  
  .slider-counter__link--dots .dot {
    transition: all 0.3s ease !important;
    opacity: 0.5 !important;
    display: block !important;
    border-radius: 50% !important;
  }
  
  .slider-counter__link--dots:hover .dot {
    opacity: 0.8 !important;
    transform: scale(1.1) !important;
  }
  
  .slideshow__control-wrapper {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
  }
</style>

{% schema %}
{
  "name": "t:sections.featured-collection.name",
  "tag": "section",
  "class": "section featured-collection",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "inline_richtext",
      "id": "title",
      "default": "Featured collection",
      "label": "t:sections.featured-collection.settings.title.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "select",
      "id": "heading_tag",
      "label": "Heading tag",
      "options": [
        {
          "value": "default",
          "label": "Default"
        },
        {
          "value": "h1",
          "label": "H1"
        },
        {
          "value": "h2",
          "label": "H2"
        },
        {
          "value": "h3",
          "label": "H3"
        },
        {
          "value": "h4",
          "label": "H4"
        },
        {
          "value": "h5",
          "label": "H5"
        },
        {
          "value": "h6",
          "label": "H6"
        }
      ],
      "default": "default",
      "info": "Div is the default tag of the heading"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "t:sections.featured-collection.settings.description.label"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "t:sections.featured-collection.settings.show_description.label",
      "default": false
    },
    {
      "type": "select",
      "id": "description_style",
      "label": "t:sections.featured-collection.settings.description_style.label",
      "options": [
        {
          "value": "body",
          "label": "t:sections.featured-collection.settings.description_style.options__1.label"
        },
        {
          "value": "subtitle",
          "label": "t:sections.featured-collection.settings.description_style.options__2.label"
        },
        {
          "value": "uppercase",
          "label": "t:sections.featured-collection.settings.description_style.options__3.label"
        }
      ],
      "default": "body"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "t:sections.featured-collection.settings.collection.label"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 25,
      "step": 1,
      "default": 4,
      "label": "t:sections.featured-collection.settings.products_to_show.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 4,
      "label": "t:sections.featured-collection.settings.columns_desktop.label"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "t:sections.featured-collection.settings.full_width.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "default": true,
      "label": "t:sections.featured-collection.settings.show_view_all.label"
    },
    {
      "type": "select",
      "id": "view_all_style",
      "label": "t:sections.featured-collection.settings.view_all_style.label",
      "options": [
        {
          "value": "link",
          "label": "t:sections.featured-collection.settings.view_all_style.options__1.label"
        },
        {
          "value": "outline",
          "label": "t:sections.featured-collection.settings.view_all_style.options__2.label"
        },
        {
          "value": "solid",
          "label": "t:sections.featured-collection.settings.view_all_style.options__3.label"
        }
      ],
      "default": "solid"
    },
    {
      "type": "checkbox",
      "id": "enable_desktop_slider",
      "label": "t:sections.featured-collection.settings.enable_desktop_slider.label",
      "default": false
    },
    {
      "type": "select",
      "id": "color_scheme",
      "options": [
        {
          "value": "accent-1",
          "label": "t:sections.all.colors.accent_1.label"
        },
        {
          "value": "accent-2",
          "label": "t:sections.all.colors.accent_2.label"
        },
        {
          "value": "background-1",
          "label": "t:sections.all.colors.background_1.label"
        },
        {
          "value": "background-2",
          "label": "t:sections.all.colors.background_2.label"
        },
        {
          "value": "inverse",
          "label": "t:sections.all.colors.inverse.label"
        },
        {
          "value": "custom",
          "label": "Custom"
        }
      ],
      "default": "background-1",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info"
    },
    {
      "type": "header",
      "content": "Custom color scheme",
      "info": "This will work when you select Custom from color scheme"
    },
    {
      "type": "color",
      "label": "Custom background color",
      "id": "custom_background_color",
      "default": "#333333"
    },
    {
      "type": "color",
      "label": "Custom text color",
      "id": "custom_text_color",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "t:sections.featured-collection.settings.header.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.featured-collection.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.featured-collection.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.featured-collection.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.featured-collection.settings.image_ratio.label"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.featured-collection.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.featured-collection.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.featured-collection.settings.show_rating.label",
      "info": "t:sections.featured-collection.settings.show_rating.info"
    },
    {
      "type": "checkbox",
      "id": "enable_quick_add",
      "default": false,
      "label": "t:sections.featured-collection.settings.enable_quick_buy.label"
    },
    {
      "type": "header",
      "content": "t:sections.featured-collection.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.featured-collection.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.featured-collection.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "swipe_on_mobile",
      "default": false,
      "label": "t:sections.featured-collection.settings.swipe_on_mobile.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_top_mobile",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Top padding - mobile",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom_mobile",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "Bottom padding - mobile",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "t:sections.featured-collection.presets.name"
    }
  ]
}
{% endschema %}
